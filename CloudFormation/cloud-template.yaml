AWSTemplateFormatVersion: '2010-09-09'
Description: Smart-Photo-Album-Application

Resources:
  S3BUCKET1:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
        BucketName: search-photos-frontend
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html

  S3BUCKET2:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
        BucketName: 6998photoss
        AccessControl: Private
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false

  IAMRole:
    Type: "AWS::IAM::Role"
    DeletionPolicy: Retain
    Properties:
      RoleName: "index-photos-role-wujmn61s"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonRekognitionFullAccess"
        - "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess"
  IAMRole2:
    Type: "AWS::IAM::Role"
    DeletionPolicy: Retain
    Properties:
      RoleName: "search-photos-role-duuk95vl"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonRekognitionFullAccess"
        - "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess"
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    DeletionPolicy: Retain
    Properties:
      Description: "LF1"
      FunctionName: "index-photos"
      Handler: "lambda_function.lambda_handler"
      Architectures:
        - "x86_64"
      CodeUri: .
      # Code:
      #   S3Bucket: "6998photoss"
      #   S3Key: "LF1_index_img_cf.zip"
      MemorySize: 128
      Role:
        'Fn::GetAtt':
          - IAMRole
          - Arn
      Runtime: "python3.9"
      Timeout: 20
      TracingConfig:
        Mode: "PassThrough"
  LambdaFunction2:
    Type: "AWS::Lambda::Function"
    DeletionPolicy: Retain
    Properties:
      Description: "LF2"
      FunctionName: "search-photos"
      Handler: "lambda_function.lambda_handler"
      Architectures:
        - "x86_64"
      CodeUri: .
      # Code:
      #   S3Bucket: "phototwo"
      #   S3Key: "LF2_search_photo_cf.zip"
      MemorySize: 128
      Role:
        'Fn::GetAtt':
          - IAMRole2
          - Arn
      Runtime: "python3.9"
      Timeout: 20
      TracingConfig:
        Mode: "PassThrough"


  APIGATEWAYRESTAPI:
    Type: 'AWS::ApiGateway::RestApi'
    DeletionPolicy: Retain
    Properties:
      Name: 'AI Photo Search'
      Description: 'AI Photo Search application, built during the Cloud and Big Data course at NYU.'
      ApiKeySourceType: 'HEADER'
      BinaryMediaTypes:
        - '*/*'
      EndpointConfiguration:
        Types:
          - 'REGIONAL'

  OpenSearchInstance:
    Type: AWS::OpenSearchService::Domain
    DeletionPolicy: Retain
    Properties:
      DomainName: "photos"
      EngineVersion: "Elasticsearch_7.10"
      ClusterConfig:
        InstanceType: t3.small.search
        InstanceCount: 1
      EBSOptions:
        EBSEnabled: true
        VolumeType: gp2
        VolumeSize: 10